"use strict";
var infinite_scroll_1 = require('./infinite-scroll');
var core_1 = require('@angular/core');
describe('Infinite Scroll Directive', function () {
    // const zone = new NgZone({ enableLongStackTrace: false });
    var isScrollingDown = true;
    var zoneSpy, scrollResolverSpy, scrollRegisterSpy, positionResolverSpy;
    var positionFactoryMock = {
        create: function () { return positionResolverSpy; }
    };
    var createMockElement = function () {
        var mockedElement = new core_1.ElementRef(document.createElement('div'));
        return mockedElement;
    };
    var createInfiniteScroll = function () {
        var mockedElement = createMockElement();
        return new infinite_scroll_1.InfiniteScroll(mockedElement, zoneSpy, positionFactoryMock, scrollRegisterSpy, scrollResolverSpy);
    };
    beforeEach(function () {
        zoneSpy = jasmine.createSpyObj('zone', ['run']);
        scrollResolverSpy = {
            getScrollStats: function () {
                return { shouldScroll: true, isScrollingDown: isScrollingDown };
            }
        };
        scrollRegisterSpy = jasmine.createSpyObj('register', ['attachEvent']);
        positionResolverSpy = jasmine.createSpyObj('pos', ['create', 'container']);
    });
    it('should create an instance of the directive', function () {
        var actual = createInfiniteScroll();
        expect(actual).toBeDefined();
    });
    it('should have default @Input properties values', function () {
        var directive = createInfiniteScroll();
        var expectedInputs = {
            _distanceDown: 2,
            _distanceUp: 1.5,
            _throttle: 300,
            scrollWindow: true,
            _immediate: false,
            _horizontal: false,
            _alwaysCallback: false,
            _disabled: false
        };
        Object.keys(expectedInputs).forEach(function (input) {
            return expect(directive[input]).toEqual(expectedInputs[input]);
        });
    });
    it('should trigger the onScrollDown event when scroll has passed _distancedDown', function () {
        var directive = createInfiniteScroll();
        var container = {
            height: 0,
            scrolledUntilNow: 0,
            totalToScroll: 0,
        };
        spyOn(directive, 'onScrollDown');
        directive.ngOnInit();
        directive.handleOnScroll(container);
        var actual = directive.onScrollDown;
        expect(actual).toHaveBeenCalled();
    });
    it('should trigger the onScrollUp event when scroll has passed _distanceUp', function () {
        var directive = createInfiniteScroll();
        var container = {
            height: 0,
            scrolledUntilNow: 0,
            totalToScroll: 0,
        };
        spyOn(directive, 'onScrollUp');
        directive.ngOnInit();
        isScrollingDown = false;
        directive.handleOnScroll(container);
        var actual = directive.onScrollUp;
        expect(actual).toHaveBeenCalled();
    });
    it('should disable the scroller', function () {
        var directive = createInfiniteScroll();
        var container = {
            height: 0,
            scrolledUntilNow: 0,
            totalToScroll: 0,
        };
        spyOn(directive, 'onScrollDown');
        directive.ngOnInit();
        directive._disabled = true;
        directive.handleOnScroll(container);
        var actual = directive.onScrollDown;
        expect(actual).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;base64,