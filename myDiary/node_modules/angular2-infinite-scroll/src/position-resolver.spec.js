"use strict";
var position_resolver_1 = require('./position-resolver');
var axis_resolver_1 = require('./axis-resolver');
var core_1 = require('@angular/core');
describe('Position Resolver', function () {
    var mockedElement;
    var mockedContainer;
    var createMockDom = function () {
        var container = document.createElement('section');
        container.setAttribute('style', 'height: 500px; overflow-y: scroll');
        var el = document.createElement('div');
        el.setAttribute('style', 'height: 1000px;');
        container.appendChild(el);
        mockedElement = new core_1.ElementRef(el);
        mockedContainer = new core_1.ElementRef(container);
        return { element: mockedElement, container: mockedContainer };
    };
    var createPositionResolver = function (element, container) {
        var options = {
            windowElement: element,
            horizontal: true
        };
        var axis = new axis_resolver_1.AxisResolver();
        return new position_resolver_1.PositionResolver(axis, options);
    };
    beforeEach(function () {
    });
    it('should create an instance of position resolver', function () {
        var mockDom = createMockDom();
        var actual = createPositionResolver(mockDom.element, mockDom.container);
        expect(actual).toBeDefined();
    });
    it('should calculate points', function () {
        var mockDom = createMockDom();
        var service = createPositionResolver(mockDom.element, mockDom.container);
        var actual = service.calculatePoints(mockDom.element);
        expect(actual).toBeDefined();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb24tcmVzb2x2ZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBvc2l0aW9uLXJlc29sdmVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUlBLGtDQUFpQyxxQkFBcUIsQ0FBQyxDQUFBO0FBQ3ZELDhCQUE2QixpQkFBaUIsQ0FBQyxDQUFBO0FBQy9DLHFCQUEyQixlQUFlLENBQUMsQ0FBQTtBQUUzQyxRQUFRLENBQUMsbUJBQW1CLEVBQUU7SUFDNUIsSUFBSSxhQUF5QixDQUFDO0lBQzlCLElBQUksZUFBMkIsQ0FBQztJQUVoQyxJQUFNLGFBQWEsR0FBRztRQUNwQixJQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELFNBQVMsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLG1DQUFtQyxDQUFDLENBQUM7UUFDckUsSUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUIsYUFBYSxHQUFHLElBQUksaUJBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuQyxlQUFlLEdBQUcsSUFBSSxpQkFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxDQUFDO0lBQ2hFLENBQUMsQ0FBQztJQUVGLElBQU0sc0JBQXNCLEdBQUcsVUFBQyxPQUFtQixFQUFFLFNBQXFCO1FBQ3hFLElBQU0sT0FBTyxHQUFHO1lBQ2QsYUFBYSxFQUFFLE9BQU87WUFDdEIsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQztRQUNGLElBQU0sSUFBSSxHQUFpQixJQUFJLDRCQUFZLEVBQUUsQ0FBQztRQUM5QyxNQUFNLENBQUMsSUFBSSxvQ0FBZ0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0lBRUYsVUFBVSxDQUFDO0lBRVgsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0RBQWdELEVBQUU7UUFDbkQsSUFBTSxPQUFPLEdBQUcsYUFBYSxFQUFFLENBQUM7UUFDaEMsSUFBTSxNQUFNLEdBQUcsc0JBQXNCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHlCQUF5QixFQUFFO1FBQzVCLElBQU0sT0FBTyxHQUFHLGFBQWEsRUFBRSxDQUFDO1FBQ2hDLElBQU0sT0FBTyxHQUFHLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNFLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXN5bmMsXG4gIGluamVjdFxufSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgUG9zaXRpb25SZXNvbHZlciB9IGZyb20gJy4vcG9zaXRpb24tcmVzb2x2ZXInO1xuaW1wb3J0IHsgQXhpc1Jlc29sdmVyIH0gZnJvbSAnLi9heGlzLXJlc29sdmVyJztcbmltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZGVzY3JpYmUoJ1Bvc2l0aW9uIFJlc29sdmVyJywgKCkgPT4ge1xuICBsZXQgbW9ja2VkRWxlbWVudDogRWxlbWVudFJlZjtcbiAgbGV0IG1vY2tlZENvbnRhaW5lcjogRWxlbWVudFJlZjtcblxuICBjb25zdCBjcmVhdGVNb2NrRG9tID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKTtcbiAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdzdHlsZScsICdoZWlnaHQ6IDUwMHB4OyBvdmVyZmxvdy15OiBzY3JvbGwnKTtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnaGVpZ2h0OiAxMDAwcHg7Jyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsKTtcbiAgICBtb2NrZWRFbGVtZW50ID0gbmV3IEVsZW1lbnRSZWYoZWwpO1xuICAgIG1vY2tlZENvbnRhaW5lciA9IG5ldyBFbGVtZW50UmVmKGNvbnRhaW5lcik7XG4gICAgcmV0dXJuIHsgZWxlbWVudDogbW9ja2VkRWxlbWVudCwgY29udGFpbmVyOiBtb2NrZWRDb250YWluZXIgfTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVQb3NpdGlvblJlc29sdmVyID0gKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIGNvbnRhaW5lcjogRWxlbWVudFJlZikgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICB3aW5kb3dFbGVtZW50OiBlbGVtZW50LFxuICAgICAgaG9yaXpvbnRhbDogdHJ1ZVxuICAgIH07XG4gICAgY29uc3QgYXhpczogQXhpc1Jlc29sdmVyID0gbmV3IEF4aXNSZXNvbHZlcigpO1xuICAgIHJldHVybiBuZXcgUG9zaXRpb25SZXNvbHZlcihheGlzLCBvcHRpb25zKTtcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+e1xuICAgIFxuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBwb3NpdGlvbiByZXNvbHZlcicsICgpID0+IHtcbiAgICBjb25zdCBtb2NrRG9tID0gY3JlYXRlTW9ja0RvbSgpO1xuICAgIGNvbnN0IGFjdHVhbCA9IGNyZWF0ZVBvc2l0aW9uUmVzb2x2ZXIobW9ja0RvbS5lbGVtZW50LCBtb2NrRG9tLmNvbnRhaW5lcik7XG4gICAgZXhwZWN0KGFjdHVhbCkudG9CZURlZmluZWQoKTtcbiAgfSk7XG4gIFxuICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSBwb2ludHMnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0RvbSA9IGNyZWF0ZU1vY2tEb20oKTtcbiAgICBjb25zdCBzZXJ2aWNlID0gY3JlYXRlUG9zaXRpb25SZXNvbHZlcihtb2NrRG9tLmVsZW1lbnQsIG1vY2tEb20uY29udGFpbmVyKTtcbiAgICBjb25zdCBhY3R1YWwgPSBzZXJ2aWNlLmNhbGN1bGF0ZVBvaW50cyhtb2NrRG9tLmVsZW1lbnQpO1xuICAgIGV4cGVjdChhY3R1YWwpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSlcblxuaW50ZXJmYWNlIERlY29yYXRvckludm9jYXRpb24ge1xuICB0eXBlOiBGdW5jdGlvbjtcbiAgYXJncz86IGFueVtdO1xufVxuIl19