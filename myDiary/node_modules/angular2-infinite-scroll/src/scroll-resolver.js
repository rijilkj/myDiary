"use strict";
var core_1 = require('@angular/core');
var ScrollResolver = (function () {
    function ScrollResolver() {
        this.lastScrollPosition = 0;
    }
    ScrollResolver.prototype.shouldScroll = function (container, config, scrollingDown) {
        var distance = config.distance;
        var remaining;
        var containerBreakpoint;
        if (scrollingDown) {
            remaining = container.totalToScroll - container.scrolledUntilNow;
            containerBreakpoint = container.height * distance.down + 1;
        }
        else {
            remaining = container.scrolledUntilNow;
            containerBreakpoint = container.height * distance.up + 1;
        }
        var shouldScroll = remaining <= containerBreakpoint;
        this.lastScrollPosition = container.scrolledUntilNow;
        return shouldScroll;
    };
    ScrollResolver.prototype.isScrollingDown = function (container) {
        return this.lastScrollPosition < container.scrolledUntilNow;
    };
    ScrollResolver.prototype.getScrollStats = function (container, config) {
        var isScrollingDown = this.isScrollingDown(container);
        var shouldScroll = this.shouldScroll(container, config, isScrollingDown);
        return { isScrollingDown: isScrollingDown, shouldScroll: shouldScroll };
    };
    ScrollResolver.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    ScrollResolver.ctorParameters = [];
    return ScrollResolver;
}());
exports.ScrollResolver = ScrollResolver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2Nyb2xsLXJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxxQkFBMkIsZUFBZSxDQUFDLENBQUE7QUFHM0M7SUFBQTtRQUNTLHVCQUFrQixHQUFXLENBQUMsQ0FBQztJQWlDeEMsQ0FBQztJQS9CQyxxQ0FBWSxHQUFaLFVBQWMsU0FBd0IsRUFBRSxNQUFzQixFQUFFLGFBQXNCO1FBQ3BGLElBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxTQUFpQixDQUFDO1FBQ3RCLElBQUksbUJBQTJCLENBQUM7UUFDaEMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNsQixTQUFTLEdBQUcsU0FBUyxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7WUFDakUsbUJBQW1CLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixTQUFTLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDO1lBQ3ZDLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0QsQ0FBQztRQUNELElBQU0sWUFBWSxHQUFZLFNBQVMsSUFBSSxtQkFBbUIsQ0FBQztRQUMvRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ3JELE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELHdDQUFlLEdBQWYsVUFBaUIsU0FBd0I7UUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7SUFDOUQsQ0FBQztJQUVELHVDQUFjLEdBQWQsVUFBZ0IsU0FBd0IsRUFBRSxNQUFzQjtRQUM5RCxJQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hELElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztRQUMzRSxNQUFNLENBQUMsRUFBRSxnQ0FBZSxFQUFFLDBCQUFZLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBQ0kseUJBQVUsR0FBMEI7UUFDM0MsRUFBRSxJQUFJLEVBQUUsaUJBQVUsRUFBRTtLQUNuQixDQUFDO0lBQ0Ysa0JBQWtCO0lBQ1gsNkJBQWMsR0FBNkQsRUFDakYsQ0FBQztJQUNGLHFCQUFDO0FBQUQsQ0FBQyxBQWxDRCxJQWtDQztBQWxDWSxzQkFBYyxpQkFrQzFCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb3NpdGlvblN0YXRzLCBTY3JvbGxlckNvbmZpZyB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5leHBvcnQgY2xhc3MgU2Nyb2xsUmVzb2x2ZXIge1xuICBwdWJsaWMgbGFzdFNjcm9sbFBvc2l0aW9uOiBudW1iZXIgPSAwO1xuXG4gIHNob3VsZFNjcm9sbCAoY29udGFpbmVyOiBQb3NpdGlvblN0YXRzLCBjb25maWc6IFNjcm9sbGVyQ29uZmlnLCBzY3JvbGxpbmdEb3duOiBib29sZWFuKSB7XG4gICAgY29uc3QgZGlzdGFuY2UgPSBjb25maWcuZGlzdGFuY2U7XG4gICAgbGV0IHJlbWFpbmluZzogbnVtYmVyO1xuICAgIGxldCBjb250YWluZXJCcmVha3BvaW50OiBudW1iZXI7XG4gICAgaWYgKHNjcm9sbGluZ0Rvd24pIHtcbiAgICAgIHJlbWFpbmluZyA9IGNvbnRhaW5lci50b3RhbFRvU2Nyb2xsIC0gY29udGFpbmVyLnNjcm9sbGVkVW50aWxOb3c7XG4gICAgICBjb250YWluZXJCcmVha3BvaW50ID0gY29udGFpbmVyLmhlaWdodCAqIGRpc3RhbmNlLmRvd24gKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1haW5pbmcgPSBjb250YWluZXIuc2Nyb2xsZWRVbnRpbE5vdztcbiAgICAgIGNvbnRhaW5lckJyZWFrcG9pbnQgPSBjb250YWluZXIuaGVpZ2h0ICogZGlzdGFuY2UudXAgKyAxO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGRTY3JvbGw6IGJvb2xlYW4gPSByZW1haW5pbmcgPD0gY29udGFpbmVyQnJlYWtwb2ludDtcbiAgICB0aGlzLmxhc3RTY3JvbGxQb3NpdGlvbiA9IGNvbnRhaW5lci5zY3JvbGxlZFVudGlsTm93O1xuICAgIHJldHVybiBzaG91bGRTY3JvbGw7XG4gIH1cblxuICBpc1Njcm9sbGluZ0Rvd24gKGNvbnRhaW5lcjogUG9zaXRpb25TdGF0cykge1xuICAgIHJldHVybiB0aGlzLmxhc3RTY3JvbGxQb3NpdGlvbiA8IGNvbnRhaW5lci5zY3JvbGxlZFVudGlsTm93O1xuICB9XG5cbiAgZ2V0U2Nyb2xsU3RhdHMgKGNvbnRhaW5lcjogUG9zaXRpb25TdGF0cywgY29uZmlnOiBTY3JvbGxlckNvbmZpZykge1xuICAgIGNvbnN0IGlzU2Nyb2xsaW5nRG93biA9IHRoaXMuaXNTY3JvbGxpbmdEb3duKGNvbnRhaW5lcik7XG4gICAgY29uc3Qgc2hvdWxkU2Nyb2xsID0gdGhpcy5zaG91bGRTY3JvbGwoY29udGFpbmVyLCBjb25maWcsIGlzU2Nyb2xsaW5nRG93bik7XG4gICAgcmV0dXJuIHsgaXNTY3JvbGxpbmdEb3duLCBzaG91bGRTY3JvbGwgfTtcbiAgfVxuc3RhdGljIGRlY29yYXRvcnM6IERlY29yYXRvckludm9jYXRpb25bXSA9IFtcbnsgdHlwZTogSW5qZWN0YWJsZSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuc3RhdGljIGN0b3JQYXJhbWV0ZXJzOiAoe3R5cGU6IGFueSwgZGVjb3JhdG9ycz86IERlY29yYXRvckludm9jYXRpb25bXX18bnVsbClbXSA9IFtcbl07XG59XG5cbmludGVyZmFjZSBEZWNvcmF0b3JJbnZvY2F0aW9uIHtcbiAgdHlwZTogRnVuY3Rpb247XG4gIGFyZ3M/OiBhbnlbXTtcbn1cbiJdfQ==