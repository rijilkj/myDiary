"use strict";
var core_1 = require('@angular/core');
var AxisResolverFactory = (function () {
    function AxisResolverFactory() {
    }
    AxisResolverFactory.prototype.create = function (vertical) {
        if (vertical === void 0) { vertical = true; }
        return new AxisResolver(vertical);
    };
    AxisResolverFactory.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    AxisResolverFactory.ctorParameters = [];
    return AxisResolverFactory;
}());
exports.AxisResolverFactory = AxisResolverFactory;
var AxisResolver = (function () {
    function AxisResolver(vertical) {
        if (vertical === void 0) { vertical = true; }
        this.vertical = vertical;
    }
    AxisResolver.prototype.clientHeightKey = function () { return this.vertical ? 'clientHeight' : 'clientWidth'; };
    AxisResolver.prototype.offsetHeightKey = function () { return this.vertical ? 'offsetHeight' : 'offsetWidth'; };
    AxisResolver.prototype.scrollHeightKey = function () { return this.vertical ? 'scrollHeight' : 'scrollWidth'; };
    AxisResolver.prototype.pageYOffsetKey = function () { return this.vertical ? 'pageYOffset' : 'pageXOffset'; };
    AxisResolver.prototype.offsetTopKey = function () { return this.vertical ? 'offsetTop' : 'offsetLeft'; };
    AxisResolver.prototype.scrollTopKey = function () { return this.vertical ? 'scrollTop' : 'scrollLeft'; };
    AxisResolver.prototype.topKey = function () { return this.vertical ? 'top' : 'left'; };
    return AxisResolver;
}());
exports.AxisResolver = AxisResolver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhpcy1yZXNvbHZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF4aXMtcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUFtQyxlQUFlLENBQUMsQ0FBQTtBQUduRDtJQUNFO0lBQWdCLENBQUM7SUFFakIsb0NBQU0sR0FBTixVQUFPLFFBQXdCO1FBQXhCLHdCQUF3QixHQUF4QixlQUF3QjtRQUM3QixNQUFNLENBQUMsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNJLDhCQUFVLEdBQTBCO1FBQzNDLEVBQUUsSUFBSSxFQUFFLGlCQUFVLEVBQUU7S0FDbkIsQ0FBQztJQUNGLGtCQUFrQjtJQUNYLGtDQUFjLEdBQTZELEVBQ2pGLENBQUM7SUFDRiwwQkFBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBWlksMkJBQW1CLHNCQVkvQixDQUFBO0FBRUQ7SUFDRSxzQkFBb0IsUUFBd0I7UUFBaEMsd0JBQWdDLEdBQWhDLGVBQWdDO1FBQXhCLGFBQVEsR0FBUixRQUFRLENBQWdCO0lBQzVDLENBQUM7SUFDRCxzQ0FBZSxHQUFmLGNBQW9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzVFLHNDQUFlLEdBQWYsY0FBb0IsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDNUUsc0NBQWUsR0FBZixjQUFvQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUM1RSxxQ0FBYyxHQUFkLGNBQW1CLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzFFLG1DQUFZLEdBQVosY0FBaUIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDckUsbUNBQVksR0FBWixjQUFpQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNyRSw2QkFBTSxHQUFOLGNBQVcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDckQsbUJBQUM7QUFBRCxDQUFDLEFBVkQsSUFVQztBQVZZLG9CQUFZLGVBVXhCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5leHBvcnQgY2xhc3MgQXhpc1Jlc29sdmVyRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgY3JlYXRlKHZlcnRpY2FsOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIHJldHVybiBuZXcgQXhpc1Jlc29sdmVyKHZlcnRpY2FsKTtcbiAgfVxuc3RhdGljIGRlY29yYXRvcnM6IERlY29yYXRvckludm9jYXRpb25bXSA9IFtcbnsgdHlwZTogSW5qZWN0YWJsZSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuc3RhdGljIGN0b3JQYXJhbWV0ZXJzOiAoe3R5cGU6IGFueSwgZGVjb3JhdG9ycz86IERlY29yYXRvckludm9jYXRpb25bXX18bnVsbClbXSA9IFtcbl07XG59XG5cbmV4cG9ydCBjbGFzcyBBeGlzUmVzb2x2ZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZlcnRpY2FsOiBib29sZWFuID0gdHJ1ZSkge1xuICB9XG4gIGNsaWVudEhlaWdodEtleSgpIHsgcmV0dXJuIHRoaXMudmVydGljYWwgPyAnY2xpZW50SGVpZ2h0JyA6ICdjbGllbnRXaWR0aCc7IH1cbiAgb2Zmc2V0SGVpZ2h0S2V5KCkgeyByZXR1cm4gdGhpcy52ZXJ0aWNhbCA/ICdvZmZzZXRIZWlnaHQnIDogJ29mZnNldFdpZHRoJzsgfVxuICBzY3JvbGxIZWlnaHRLZXkoKSB7IHJldHVybiB0aGlzLnZlcnRpY2FsID8gJ3Njcm9sbEhlaWdodCcgOiAnc2Nyb2xsV2lkdGgnOyB9XG4gIHBhZ2VZT2Zmc2V0S2V5KCkgeyByZXR1cm4gdGhpcy52ZXJ0aWNhbCA/ICdwYWdlWU9mZnNldCcgOiAncGFnZVhPZmZzZXQnOyB9XG4gIG9mZnNldFRvcEtleSgpIHsgcmV0dXJuIHRoaXMudmVydGljYWwgPyAnb2Zmc2V0VG9wJyA6ICdvZmZzZXRMZWZ0JzsgfVxuICBzY3JvbGxUb3BLZXkoKSB7IHJldHVybiB0aGlzLnZlcnRpY2FsID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7IH1cbiAgdG9wS2V5KCkgeyByZXR1cm4gdGhpcy52ZXJ0aWNhbCA/ICd0b3AnIDogJ2xlZnQnOyB9XG59XG5cbmludGVyZmFjZSBEZWNvcmF0b3JJbnZvY2F0aW9uIHtcbiAgdHlwZTogRnVuY3Rpb247XG4gIGFyZ3M/OiBhbnlbXTtcbn1cbiJdfQ==